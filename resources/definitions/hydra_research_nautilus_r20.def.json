{
    "version": 2,
    "name": "Hydra Research Nautilus R20",
    "inherits": "hydra_research_excluded_materials",
    "metadata": {
        "visible": true,
        "author": "Hydra Research",
        "manufacturer": "Hydra Research",
        "category": "Hydra Research",
        "file_formats": "text/x-gcode",
        "icon": "icon_ultimaker2",
        "platform": "hydra_research_nautilus_platform.stl",
        "has_machine_quality": true,
        "has_materials": true,
        "has_machine_materials": true,
        "has_variant_materials": true,
        "has_variants": true,
        "variants_name": "Tool Cartridge",
        "preferred_material": "hr_fillamentum_pla_extrafill",
        "preferred_variant_name": "X 400",
        "preferred_quality_type": "Normal",
        "machine_extruder_trains":
        {
            "0": "hydra_research_nautilus_extruder"
        }
    },

    "overrides": {
        "machine_name": { "default_value": "Hydra Research Nautilus R20" },
        "machine_heated_bed": { "default_value": true },
        "machine_width": { "default_value": 206 },
        "machine_height": { "default_value": 220 },
        "machine_depth": { "default_value": 206 },
        "machine_center_is_zero": { "default_value": false },
		    "machine_nozzle_temp_enabled": { "value": true },
        "material_bed_temperature": { "default_value": 50 },
        "retraction_amount": { "default_value": 1 },
        "retraction_speed": { "default_value": 35 },
        "retraction_retract_speed": { "default_value": 35 },
        "retraction_prime_speed": { "default_value": 35 },
        "adhesion_type": { "default_value": "brim" },
        "machine_head_with_fans_polygon": { "default_value": [[-43,81],[43,81],[43,-81],[-43,-81]] },
        "gantry_height": { "default_value": 52 },
        "machine_max_feedrate_x": { "default_value": 300 },
        "machine_max_feedrate_y": { "default_value": 300 },
        "machine_max_feedrate_z": { "default_value": 40},
        "machine_max_feedrate_e": { "default_value": 4000 },
        "machine_max_acceleration_z": { "default_value": 800 },
        "machine_acceleration": { "default_value": 2000},
        "machine_max_jerk_xy": { "default_value": 10 },
        "machine_max_jerk_z": { "default_value": 0.4 },
        "machine_max_jerk_e": { "default_value": 1.5 },
        "machine_gcode_flavor": { "default_value": "RepRap (RepRap)" },
        "machine_extruder_count": { "default_value": 1 },
        "machine_start_gcode": {
            "default_value": "M291 P\"Tool Cartridge: {variant_name}, Material: {material_name}, and Print Surface: {material_print_surface}\" R\"This Job Uses\" S3\nM140 S{material_bed_probe_temperature} ; set bed probing temp\n{material_door_status}M291 P\"Running this job with the DOOR OPEN is recommended.\" R\"Door Status\" S2\nM591 D0 S1 ; Enable filament sensing\nM98 P/sys/Z-offset {variant_name}.g ; Call tool offset\nM291 P\"Waiting to reach bed probing temperature...\" R\"Auto Level Compensation\" S1 T0\nM190 S{material_bed_probe_temperature} ; wait for bed probing temp\nM104 S{material_print_temperature_layer_0} T0 ; set extruder temp\nM140 S{material_bed_temperature_layer_0} ; set bed temp layer 0\nG4 S30\nM98 P/sys/probeauto.g ; conduct auto bed level compensation\nG1 X-8 Y20 F6000 ; position over purge bucket\nM190 S{material_bed_temperature_layer_0} ; wait for bed temp\nM109 S{material_print_temperature_layer_0} T0; wait for extruder temp\nM83\nM572 D0 S{pressure_advance_value_calculated} ; set material pressure advance value\nT0\nM116 ; Wait for temperatures\nG1 E20 F80 ; Prime\nM98 P/sys/wipe.g ; wipe"
			},
        "machine_end_gcode": {
            "default_value": "G1 E-2 F2000 ; retract filament\nM107 ; turn off fan\nG28 Z ; home z\nG1 X200 Y200 F3000 ; move to cooling position\nM140 S0 ; turn off bed\nM104 S0 ; turn off extruder\nG90 ; absolute positioning\n{part_removal_temperature_enable}M291 P\"Please wait. Cooling to part removal temperature of {material_part_removal_temperature}C. Open door to speed up cooldown.\" R\"Heatbed Cooling\" S1 T0\n{part_removal_temperature_enable}M190 R{material_part_removal_temperature} ; Wait to reach removal temp\nM300 S250 P1000 ; Play notification beep\nM291 P\"You may now remove your part. CAUTION! Print Surface may still be HOT!\" R\"Print Finished.\" S2\nM140 S0; Turn off bed"
			},

    "prime_blob_enable": { "enabled": true, "default_value": false },
    "layer_height_0": { "value": "round(machine_nozzle_size / 1.6, 2)" },
		"line_width": { "value": "round(machine_nozzle_size * 1.125, 2)" },
		"wall_line_width_0": { "value": "wall_line_width" },
		"wall_line_width_x": { "value": "wall_line_width" },
		"infill_line_width": { "value": "round(line_width, 2)" },
		"roofing_line_width": { "value": "machine_nozzle_size" },
		"initial_layer_line_width_factor": { "value": "110" },
    "wall_min_flow": {"value": "50"},

		"wall_0_wipe_dist": { "value": "machine_nozzle_size / 2"},
		"infill_wipe_dist": { "value": "machine_nozzle_size * .75"},
		"wall_thickness": { "value": "wall_line_width_0 + wall_line_width_x"},
		"roofing_layer_count": { "value": "1"},
		"top_bottom_thickness": { "value": "wall_thickness" },
		"top_thickness": { "value": "top_bottom_thickness + (layer_height * 2) if infill_sparse_density < 15 else top_bottom_thickness + layer_height" },
		"optimize_wall_printing_order": { "value": "True" },
		"travel_compensate_overlapping_walls_enabled": { "value": "True" },
		"fill_perimeter_gaps": { "value": "'everywhere'" },
		"filter_out_tiny_gaps": { "value": "True" },
		"fill_outline_gaps": { "value": "True" },
		"z_seam_type": { "value": "'sharpest_corner'"},
		"z_seam_corner": { "value": "'z_seam_corner_weighted'"},
		"skin_no_small_gaps_heuristic": { "value": "False" },

		"zig_zaggify_infill": { "value": "gradual_infill_steps == 0" },
		"infill_overlap": { "value": "10" },
		"skin_overlap": { "value": "5" },
		"infill_before_walls": { "value": "False" },
		"skin_preshrink": { "value": "line_width * 2.22" },

    "material_standby_temperature": { "value": "0" },
		"material_bed_temperature_layer_0": {
		"minimum_value_warning": "25",
		"value": "default_material_bed_temperature - 5"
		},
		"retraction_enable": { "value": "True" },
		"retract_at_layer_change": { "value": "True" },
		"retraction_min_travel": { "value": "machine_nozzle_size * 4" },
		"retraction_count_max": { "value": "25" },
		"retraction_extrusion_window": { "value": "1"},
		"retraction_extra_prime_amount": { "value": "0 if not coasting_enable else coasting_volume" },

    "speed_print": {
			"maximum_value_warning": "205",
			"default_value": 125,
			"value": "math.ceil((speed_volumetric_min / (line_width * layer_height)) if 200 < (speed_volumetric_min / (line_width * layer_height)) else 200 if 200 < (speed_print_max if speed_print_max < (speed_volumetric_max / (line_width * layer_height)) else (speed_volumetric_max / (line_width * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (line_width * layer_height)) else (speed_volumetric_max / (line_width * layer_height)))"
		},
		"speed_infill": {
			"maximum_value_warning": "205",
			"default_value": 125,
			"value": "math.ceil((speed_volumetric_min / (infill_line_width * infill_sparse_thickness)) if 200 < (speed_volumetric_min / (infill_line_width * infill_sparse_thickness)) else 200 if 200 < (speed_print_max if speed_print_max < (speed_volumetric_max / (infill_line_width * infill_sparse_thickness)) else (speed_volumetric_max / (infill_line_width * infill_sparse_thickness))) else speed_print_max if speed_print_max < (speed_volumetric_max / (infill_line_width * infill_sparse_thickness)) else (speed_volumetric_max / (infill_line_width * infill_sparse_thickness)))"
		},
		"speed_wall": {
			"maximum_value_warning": "205",
			"default_value": 30,
			"value": "math.ceil((speed_volumetric_min / (wall_line_width * layer_height)) if 30 < (speed_volumetric_min / (wall_line_width * layer_height)) else 30 if 30 < (speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width * layer_height)) else (speed_volumetric_max / (wall_line_width * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width * layer_height)) else (speed_volumetric_max / (wall_line_width * layer_height)))"
		},
		"speed_wall_0": {
			"maximum_value_warning": "205",
			"default_value": 30,
			"value": "math.ceil((speed_volumetric_min / (wall_line_width_0 * layer_height)) if speed_wall < (speed_volumetric_min / (wall_line_width_0 * layer_height)) else speed_wall if speed_wall < (speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width_0 * layer_height)) else (speed_volumetric_max / (wall_line_width_0 * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width_0 * layer_height)) else (speed_volumetric_max / (wall_line_width_0 * layer_height)))"
		},
		"speed_wall_x": {
			"maximum_value_warning": "205",
			"default_value": 50,
			"value": "math.ceil((speed_volumetric_min / (wall_line_width_x * layer_height)) if (speed_wall * 1.66) < (speed_volumetric_min / (wall_line_width_x * layer_height)) else (speed_wall * 1.66) if (speed_wall * 1.66) < (speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width_x * layer_height)) else (speed_volumetric_max / (wall_line_width_x * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (wall_line_width_x * layer_height)) else (speed_volumetric_max / (wall_line_width_x * layer_height)))"
		},
		"speed_roofing": {
			"maximum_value_warning": "205",
			"default_value": 50,
			"value": "math.ceil((speed_volumetric_min / (roofing_line_width * layer_height)) if 50 < (speed_volumetric_min / (roofing_line_width * layer_height)) else 50 if 50 < (speed_print_max if speed_print_max < (speed_volumetric_max / (roofing_line_width * layer_height)) else (speed_volumetric_max / (roofing_line_width * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (roofing_line_width * layer_height)) else (speed_volumetric_max / (roofing_line_width * layer_height)))"
		},
		"speed_topbottom": {
			"maximum_value_warning": "205",
			"default_value": 125,
			"value": "math.ceil((speed_volumetric_min / (skin_line_width * layer_height)) if 200 < (speed_volumetric_min / (skin_line_width * layer_height)) else 200 if 200 < (speed_print_max if speed_print_max < (speed_volumetric_max / (skin_line_width * layer_height)) else (speed_volumetric_max / (skin_line_width * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (skin_line_width * layer_height)) else (speed_volumetric_max / (skin_line_width * layer_height)))"
		},
		"speed_support": {
			"maximum_value_warning": "205",
			"default_value": 80,
			"value": "math.ceil((speed_volumetric_min / (support_line_width * support_infill_sparse_thickness)) if 80 < (speed_volumetric_min / (support_line_width * support_infill_sparse_thickness)) else 80 if 80 < (speed_print_max if speed_print_max < (speed_volumetric_max / (support_line_width * support_infill_sparse_thickness)) else (speed_volumetric_max / (support_line_width * support_infill_sparse_thickness))) else speed_print_max if speed_print_max < (speed_volumetric_max / (support_line_width * support_infill_sparse_thickness)) else (speed_volumetric_max / (support_line_width * support_infill_sparse_thickness)))"
		},
    "speed_support_interface": {
      "value": "math.ceil((speed_volumetric_min / (support_interface_line_width * layer_height)) if 40 < (speed_volumetric_min / (support_interface_line_width * layer_height)) else 40 if 40 < (speed_print_max if speed_print_max < (speed_volumetric_max / (support_interface_line_width * layer_height)) else (speed_volumetric_max / (support_interface_line_width * layer_height))) else speed_print_max if speed_print_max < (speed_volumetric_max / (support_interface_line_width * layer_height)) else (speed_volumetric_max / (support_interface_line_width * layer_height)))"
    },
		"speed_travel": {
			"maximum_value_warning": "305",
			"default_value": 200,
			"value": "200"
		},
		"speed_layer_0": {
			"maximum_value_warning": "205",
			"default_value": 25,
			"value": "math.ceil((speed_volumetric_min / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0)) if 25 < (speed_volumetric_min / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0)) else 25 if 25 < (speed_print_max if speed_print_max < (speed_volumetric_max / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0)) else (speed_volumetric_max / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0))) else speed_print_max if speed_print_max < (speed_volumetric_max / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0)) else (speed_volumetric_max / (line_width * initial_layer_line_width_factor * 0.01 * layer_height_0)))"
		},
		"speed_travel_layer_0": {
			"maximum_value_warning": "305",
			"default_value": 150,
			"value": "150"
		},


		"speed_slowdown_layers": { "default_value": 2 },
    "speed_equalize_flow_enabled": {"value": "True"},
    "speed_equalize_flow_max": {"value": "math.ceil(speed_print * 2 if speed_print * 2 < 150 else 150)"},
		"acceleration_enabled": { "value": "True"},
		"acceleration_print": { "value": "3000" },
		"acceleration_wall": { "value": "500" },
		"acceleration_wall_0": { "value": "500" },
		"acceleration_travel": { "value": "3000"},
    "acceleration_layer_0": { "value": "acceleration_print / 2"},
		"jerk_enabled": { "value": "True" },
		"jerk_print": { "value": "12" },
		"jerk_wall": { "value": "7" },
		"jerk_wall_0": { "value": "7" },
		"jerk_travel": { "value": "12" },


		"retraction_combing": { "value": "'off'" },
		"retraction_combing_max_distance": { "value": "1" },
		"travel_retract_before_outer_wall": { "value": "False" },
		"travel_avoid_distance": { "value": "machine_nozzle_size * 4" },
		"layer_start_x": {"value": "205" },
		"layer_start_y": {"value": "205" },
		"retraction_hop_enabled": { "value": "True" },
		"retraction_hop_only_when_collides": { "value": "False" },
		"travel_avoid_other_parts": { "value": "True" },
    "travel_avoid_supports": { "value": "True" },
		"retraction_hop": { "default_value": 0.4 },

  	"cool_fan_full_at_height": { "value": "layer_height_0 + 2 * layer_height" },
		"cool_fan_speed_0": { "value": "0"},
		"cool_fan_speed_min": { "value": "cool_fan_speed" },
    "cool_fan_speed": { "value": "50" },
    "cool_min_speed": { "value": "5" },
    "cool_min_layer_time_fan_speed_max": {"value": "4"},
    "cool_min_layer_time": {"value": "20"},
    "cool_min_speed": {"value": "math.ceil((speed_volumetric_min / (line_width * layer_height)) if (speed_volumetric_min / (line_width * layer_height)) > 15 else speed_print if speed_print < 15 else 15)"},

    "support_conical_enabled": { "value": "True" },
    "support_conical_angle": {"default_value": 35},
    "support_conical_min_width": { "default_value": 15 },
    "support_angle": { "value": "60" },
    "support_pattern": { "value": "'zigzag'" },
		"support_line_width": { "value": "machine_nozzle_size *.875" },
		"support_interface_line_width": { "value": "machine_nozzle_size * 0.875" },
		"support_interface_pattern": { "value": "'zigzag'" },
    "support_use_towers": { "value": "False" },
		"support_interface_enable": { "value": "True" },
    "support_interface_angles": { "value": "[90]" },
    "support_roof_angles": { "value": "support_interface_angles" },
    "support_bottom_angles": { "value": "support_interface_angles" },
		"support_fan_enable": { "value": "True" },
    "support_bottom_stair_step_height": {"value": "0.3"},
    "support_brim_enable": { "value": "True" },
		"brim_width": { "default_value": 5 },
		"skirt_gap":{ "value": "line_width * 3" },
		"support_fan_enable": { "value": "cool_fan_enabled" },
		"support_supported_skin_fan_speed": { "value": "0 if cool_fan_enabled == False else cool_fan_speed_max" },

    "raft_margin":{ "value": "2"},
    "raft_smoothing": { "value": "2" },
    "raft_airgap": {"value": "0.2" },
    "raft_surface_layers": { "value": "1" },
    "raft_surface_line_width": { "value": "support_interface_line_width" },
    "raft_surface_line_spacing": { "value": "support_roof_line_distance"},

		"slicing_tolorance": { "value": "'middle'" },
		"minimum_polygon_circumference": { "value": "machine_nozzle_size * 2 " },
		"coasting_enable": { "value": "False" },
		"coasting_volume": { "value": "(machine_nozzle_size ** 3) / 2" },
		"coasting_min_volume": { "value": "(machine_nozzle_size ** 3) * 2" },
		"coasting_speed": { "value": "speed_wall_0" },
		"bridge_settings_enabled": { "value": "True" },
		"bridge_enable_more_layers": { "value": "True" },
    "bridge_wall_min_length": {"value": "2" },
    "bridge_skin_support_threshold": {"value": "50" },
    "bridge_wall_coast": {"value": "100" },
		"bridge_wall_speed": { "value": "speed_print if speed_print < 30 else cool_min_speed if cool_min_speed > 30 else 30" },
    "bridge_skin_speed": { "value": "speed_print if speed_print < 30 else cool_min_speed if cool_min_speed > 30 else 30" },
		"bridge_fan_speed": { "value": "0 if cool_fan_enabled == False else cool_fan_speed_max" },
		"bridge_fan_speed_2": { "value": "0 if cool_fan_enabled == False else cool_fan_speed" },
    "bridge_skin_speed_2": { "value": "speed_print if speed_print < 60 else 60"},
		"bridge_fan_speed_3": { "value": "0 if cool_fan_enabled == False else cool_fan_speed" },
    "bridge_skin_speed_3": { "value": "speed_print if speed_print < 100 else 100"},
    "small_hole_max_size": { "value": "12" },
    "small_feature_speed_factor": { "value": "100 if (speed_volumetric_min / (line_width * layer_height)) > speed_wall_0 * 0.7 else 70" },
    "small_feature_speed_factor_0": { "value": "100 if (speed_volumetric_min / (line_width * layer_height)) > speed_layer_0 * 0.7 else 70" }
    },

	"settings":
    {
		"resolution":
        {
			       "children":
			          {
    				      "variant_name":
                    {
                        "label": "Tool Cartridge",
                        "description": "Name of Tool Cartridge, used for G-code output metadata",
                        "type": "enum",
                        "options":
                        {
                            "X 400": "X 400",
                            "B 250": "B 250",
                            "X 800": "X 800",
                            "Unkown": "Unknown"
                        },
                        "default_value": "Unknown",
                        "settable_per_mesh": false
				            }
			         }
		 },
		"material":
		{
			"children":
			{
        "part_removal_temperature_enable":
        {
            "label": "Part Removal Temperature Enable",
            "description": "Enable or disbale material part removale temperature notifactions at the end of a print job.",
            "type": "enum",
            "options":
            {
                " ": "Enable",
                ";": "Disable"
            },
            "default_value": " ",
            "settable_per_mesh": false,
            "settable_per_extruder": false,
            "children":
            {
                  "material_part_removal_temperature":
                  {
                    "label": "Part Removal Temperature",
                    "description": "The ideal bed temperature to remove the part after printing.",
                    "unit": "°C",
                    "minimum_value": "0",
                    "type": "float",
                    "maximum_value": "110",
                    "minimum_value": "0",
                    "minimum_value_warning": "20",
                    "maximum_value_warning": "80",
                    "default_value": 50,
                    "value": "math.ceil(material_bed_temperature if material_bed_temperature < 40 else 40 + ((material_bed_temperature - 40) *.1))",
                    "enabled": "part_removal_temperature_enable != \";\"",
                    "settable_per_mesh": false,
                    "settable_per_extruder": false
                }
            }
        },
        "material_bed_probe_temperature":
				{
					"label": "Heat Bed Probing Temperature",
					"description": "A temperature close to the bed temperature during printing to account for thermal expansion of the bed when probing.",
					"unit": "°C",
					"minimum_value": "0",
					"type": "float",
					"maximum_value": "125",
					"minimum_value": "0",
                    "minimum_value_warning": "30",
                    "maximum_value_warning": "125",
					"default_value": 50,
					"value": "math.ceil(material_bed_temperature_layer_0)",
					"settable_per_mesh": false,
					"settable_per_extruder": false
				},
				"pressure_advance_value":
				{
					"label": "Pressure Advance Value",
					"description": "Pressure advance aims to compensate for the elasticity of the filament and the extruder system. Every material will require a slightly different value. Values between 0.01 and 0.1 are recommended for most rigid materials, try a higher value for flexible materials. Calibrated for 0.4mm diameter nozzle and 0.2mm layers",
					"unit": "",
					"type": "float",
					"default_value": 0.05,
					"minimum_value_warning": ".01",
					"maximum_value_warning": "1.2",
					"settable_per_extruder": true,
					"settable_per_mesh": false,
					"minimum_value": "0"
				},
        "pressure_advance_value_calculated":
				{
					"label": "Pressure Advance Calculated Value",
					"description": "Pressure advance calculated value aims to volumetrically calculate pressure advance values based on layer height and nozzle diameter. This assumes that the Pressure Advance Value is calibrated for 0.4mm diameter nozzle and 0.2mm layers.",
					"unit": "",
					"type": "float",
					"default_value": 0.05,
          "value": "round(pressure_advance_value * math.sqrt(0.08 / (machine_nozzle_size * layer_height)), 3)",
					"minimum_value_warning": "0",
					"maximum_value_warning": "2",
					"settable_per_extruder": true,
					"settable_per_mesh": false,
					"minimum_value": "0"
				},
				"speed_volumetric_max":
                {
                    "label": "Maximum Volumetric Speed",
                    "description": "Maximum volumetric speed allowed for this material. Limits the maximum printing speed to the maximum material volumetric speed.",
                    "unit": "mm³/s",
                    "type": "float",
                    "minimum_value": "0.1",
                    "maximum_value_warning": "25",
                    "maximum_value": "math.sqrt(machine_max_feedrate_x ** 2 + machine_max_feedrate_y ** 2)",
                    "default_value": 15,
                    "settable_per_mesh": true
				},
        "speed_volumetric_min":
                {
                    "label": "Minimum Volumetric Speed",
                    "description": "Minimum volumetric speed allowed for this material. Limits the minimum printing speed to the minimum material volumetric speed.",
                    "unit": "mm³/s",
                    "type": "float",
                    "minimum_value": "0",
                    "maximum_value_warning": "25",
                    "maximum_value": "math.sqrt(machine_max_feedrate_x ** 2 + machine_max_feedrate_y ** 2)",
                    "default_value": 0.1,
                    "settable_per_mesh": true
				},
				"material_name":
                {
                    "label": "Material Name",
                    "description": "Name of material, used for gcode output metadata",
                    "unit": "",
                    "type": "str",
                    "default_value": "Unknown",
					          "settable_per_extruder": true,
                    "settable_per_mesh": false
				},
				"material_print_surface":
                {
                    "label": "Recommended Print Surface",
                    "description": "Recommended Print Surface for this material. Used for gcode output metadata.",
                    "type": "enum",
                    "options":
                    {
                        "PEI": "PEI",
                        "BuildTak Original": "BuildTak Original",
                        "Garrolite": "Garrolite",
                        "PP": "PP",
                        "Use bed adhesive": "Use bed adhesive",
                        "Unkown": "Unknown"
                    },
                    "default_value": "Unknown",
                    "settable_per_mesh": false
				},
        "material_door_status":
                {
                    "label": "Material Door Status",
                    "description": "Should the door be open or closed for printing this material. This only effects the popup message at the begining of a print job",
                    "type": "enum",
                    "options":
                    {
                        " ": "Open",
                        ";": "Closed"
                    },
                    "default_value": ";",
                    "settable_per_mesh": false
				}
      }
    }
	}
}
